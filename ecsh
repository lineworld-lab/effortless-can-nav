#!/bin/bash


set -euo pipefail

 


CMD="$1"



# Function to display help message
ecsh_help () {

    echo "ecsh: help"
    echo "Usage: ./ecsh [COMMAND]"
    echo ""

    echo "Commands:"
    echo "  help            Display this help message."
    echo "  vendor          Download and build vendor dependencies (SOEM and cJSON)."
    echo "  build           Build the project."
    echo "  clean           Clean vendor directories."
    echo "  server          Run the server with root permissions."
    echo "  client          Connect to the server."
    echo "  gui_client      Run the GUI client."
    echo ""

    echo "Examples:"
    echo "  ./ecsh help"
    echo "  ./ecsh vendor"
    echo "  ./ecsh build"
    echo "  ./ecsh clean"
    echo "  ./ecsh server"
    echo "  ./ecsh client"
    ecbo "  ./ecsh gui_client"
    echo ""

    echo "Operating sequence"
    echo "./ecsh vendor -> ./ecsh build -> sudo ./ecsh server -> ./ecsh client or ./ecsh gui_client"
    echo ""

    }



# Function to handle vendor dependencies
ecsh_vendor () {


    echo "ecsh: vendor"

    if command -v cmake &> /dev/null; then
        echo "cmake is already installed, removing..."
        sudo apt remove --purge -y cmake
    fi
    echo "installing cmake..."
    sudo apt update
    sudo apt install -y cmake
    
    cd vendor

    # SOEM 

    if [ -d "./SOEM" ]; then
        echo "SOEM already exists, skipping clone"
    else
        git clone https://github.com/OpenEtherCATsociety/SOEM.git
    fi

    cd SOEM

    if [ -d "build" ]; then
        sudo rm -r build
    fi
    
    mkdir build 

    cd build 

    cmake ..

    make 

    cd ../../

    # cJSON

    if [ -d "./cJSON" ]
    then
        sudo rm -r ./cJSON
    fi

    git clone https://github.com/DaveGamble/cJSON.git



}



# Function to build the project
ecsh_build(){


    echo "ecsh: build"

    if [ -d "./build" ]
    then
        sudo rm -r ./build
    fi

    mkdir -p build

    cd build

    cmake ..

    make




}



# Function to handle real-time vendor dependencies
ecsh_vendor_rt () {


    echo "ecsh: vendor rt"

    cd vendor

    # igh etherlab 

    if [ -d "./ethercat" ]
    then
        sudo rm -r ./ethercat
    fi


    if [ -z "$1" ]
    then
        sudo apt update
        sudo apt install -y linux-headers-$(uname -r) build-essential libtool automake tree dkms

    elif [ "$1" == "cnc4" ]
    then
        sudo apt update
        sudo apt install -y build-essential libtool automake tree dkms
    fi

    git clone https://gitlab.com/etherlab.org/ethercat.git

    cd ethercat

    git switch -c stable-1.6 origin/stable-1.6

    ./bootstrap 

    ./configure --enable-generic --disable-8139too --disable-e100 --disable-e1000 --disable-e1000e --disable-igb --disable-r8169 --disable-ccat --enable-static=no --enable-shared=yes --enable-eoe=no --enable-cycles=no --enable-hrtimer=no --enable-regalias=no --enable-tool=yes --enable-userlib=yes --enable-sii-assign=yes --enable-rt-syslog=yes

    make all modules 

    cd ../

    # cJSON

    if [ -d "./cJSON" ]
    then
        sudo rm -r ./cJSON
    fi

    git clone https://github.com/DaveGamble/cJSON.git



}



# Function to build the project with real-time support
ecsh_build_rt(){


    echo "ecsh: build rt"

    if [ -d "./build" ]
    then
        sudo rm -r ./build
    fi

    mkdir -p build

    cd build

    cmake -DECRT=y ..

    make




}



# Function to clean vendor directories
ecsh_clean (){

    echo "ecsh: clean"

    read -p "Are you sure you want to delete all build files and directories? [y/n]: " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Clean operation cancelled."
        return
    fi

    if [ -d "./vendor/SOEM/build" ]; then
        echo "Removing SOEM build directory..."
        sudo rm -r ./vendor/SOEM/build
    fi

    if [ -d "./vendor/cJSON" ]; then
        echo "Removing cJSON directory..."
        sudo rm -r ./vendor/cJSON
    fi

    echo "Clean operation completed."
}



# Function to run the server with root permissions
ecsh_server () {

    echo "ecsh: server"

    if [ "$(id -u)" -ne 0 ]; then
        echo "This command must be run as root."
        exit 1
    fi

    if [ ! -d "./build" ]
    then
        echo "build doesn't exist"
        exit -1
    fi

    cp -Rf ./config/config.json ./build

    cd build && sudo ./ecserver
    
}


# Function to execute ecctl command
ecsh_client () {
    if [ ! -d "./build" ]; then
        echo "Error: build directory does not exist. Please build the project first."
        exit 1
    fi

    cd build

    ./ecctl

}


# Function to run the GUI client
ecsh_gui_client () {
    echo "ecsh: GUI client"

    if [ ! -f "./pyqt/ec_client_gui.py" ]; then
        echo "Error: ec_client_gui.py does not exist in the pyqt directory."
        exit 1
    fi

    # Check if Python is installed
    if ! command -v python3 &> /dev/null; then
        echo "Python3 is not installed. Please install Python3 to run the GUI client."
        exit 1
    fi

    # Check if required Python packages are installed
    required_packages="PyQt5 asyncio"
    for package in $required_packages; do
        if ! python3 -c "import $package" &> /dev/null; then
            echo "Python package '$package' is not installed. Installing..."
            pip3 install $package
        fi
    done

    # Run the GUI client
    python3 ./pyqt/ec_client_gui.py
}






if [ "$CMD" == "help" ]
then 

    ecsh_help

elif [ "$CMD" == "vendor" ]
then


    ecsh_vendor 

elif [ "$CMD" == "build" ]
then 

    ecsh_build

elif [ "$CMD" == "vendor_rt" ]
then

    EC_PREBUILT=""

    if [ ! -z "$2" ]
    then
        EC_PREBUILT="$2"
    fi

    ecsh_vendor_rt "$EC_PREBUILT"

elif [ "$CMD" == "build_rt" ]
then 

    ecsh_build_rt



elif [ "$CMD" == "run" ]
then

    ecsh_run

elif [ "$CMD" == "clean" ]
then

    ecsh_clean



elif [ "$CMD" == "server" ]
then

    ecsh_server



elif [ "$CMD" == "client" ]
then

    ecsh_client




elif [ "$CMD" == "gui_client" ]
then

    ecsh_gui_client



else 

    echo "invalid cmd: $CMD"
    exit -1


fi